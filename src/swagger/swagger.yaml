openapi: 3.0.0
info:
  title: Kapu$ta API
  version: 1.0.3
  description: API for personal finance management.
servers:
  - url: https://kapusta-eta.vercel.app
  - url: http://localhost:3001

paths:
  /auth/register:
    post:
      tags:
        - Authorization
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterRequest"
      responses:
        "201":
          description: User successfully registered
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RegisterResponse"
        "409":
          description: Email already in use
        "400":
          description: Invalid input data

  /auth/login:
    post:
      tags:
        - Authorization
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: User successfully logged in
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
        "403":
          description: Invalid email or password
        "400":
          description: Invalid input data

  /auth/logout:
    post:
      tags:
        - Authorization
      summary: User logout
      security:
        - BearerAuth: []
      responses:
        "204":
          description: User successfully logged out
        "401":
          description: Unauthorized

  /auth/refresh:
    post:
      tags:
        - Authorization
      summary: Refresh access token
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RefreshTokenRequest"
      responses:
        "200":
          description: Access token successfully refreshed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RefreshTokenResponse"
        "401":
          description: Unauthorized or Invalid refresh token
        "400":
          description: Invalid input data

  /user/balance:
    patch:
      tags:
        - User
      summary: Update user balance
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateBalanceRequest"
      responses:
        "200":
          description: Balance successfully updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateBalanceResponse"
        "400":
          description: Invalid input data
        "401":
          description: Unauthorized
        "404":
          description: User not found

  /user:
    get:
      tags:
        - User
      summary: Get current user data
      security:
        - BearerAuth: []
      responses:
        "200":
          description: User data successfully retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  email:
                    type: string
                    format: email
                  balance:
                    type: number
                  transactions:
                    type: array
                    items:
                      $ref: "#/components/schemas/Transaction"
        "401":
          description: Unauthorized
        "404":
          description: User not found

  /transaction/expense:
    get:
      tags:
        - Transactions
      summary: Get user expenses
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Successfully retrieved user expenses
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Transaction"
        "401":
          description: Unauthorized

    post:
      tags:
        - Transactions
      summary: Add new expense
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddTransactionRequest"
      responses:
        "201":
          description: Expense successfully added
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AddTransactionResponse"
        "400":
          description: Invalid input data
        "401":
          description: Unauthorized

  /transaction/income:
    get:
      tags:
        - Transactions
      summary: Get user incomes
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Successfully retrieved user incomes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Transaction"
        "401":
          description: Unauthorized

    post:
      tags:
        - Transactions
      summary: Add new income
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddTransactionRequest"
      responses:
        "201":
          description: Income successfully added
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AddTransactionResponse"
        "400":
          description: Invalid input data
        "401":
          description: Unauthorized

  /transaction/period-data:
    get:
      tags:
        - Transactions
      summary: Get transactions data for a specific period
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: date
          required: true
          schema:
            type: string
            pattern: '^(\d{4}|\d{4}-\d{2})$'
          description: Date in format YYYY or YYYY-MM
      responses:
        "200":
          description: Successfully retrieved transactions data for the period
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PeriodDataResponse"
        "400":
          description: Invalid date format
        "401":
          description: Unauthorized

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    RegisterRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 6
      required:
        - email
        - password

    RegisterResponse:
      type: object
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: User created
        user:
          type: object
          properties:
            email:
              type: string
              format: email

    LoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
      required:
        - email
        - password

    LoginResponse:
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
        sid:
          type: string
        user:
          type: object
          properties:
            email:
              type: string
              format: email
            balance:
              type: number
            id:
              type: string
            transactions:
              type: array
              items:
                $ref: "#/components/schemas/Transaction"

    RefreshTokenRequest:
      type: object
      properties:
        refreshToken:
          type: string
      required:
        - refreshToken

    RefreshTokenResponse:
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
        sid:
          type: string

    UpdateBalanceRequest:
      type: object
      properties:
        balance:
          type: number
      required:
        - balance

    UpdateBalanceResponse:
      type: object
      properties:
        email:
          type: string
          format: email
        balance:
          type: number

    Transaction:
      type: object
      properties:
        _id:
          type: string
        description:
          type: string
        amount:
          type: number
        date:
          type: string
          format: date
        category:
          type: array
          items:
            type: string
        type:
          type: string
          enum: [income, expense]

    AddTransactionRequest:
      type: object
      properties:
        description:
          type: string
        amount:
          type: number
        date:
          type: string
          format: date
        category:
          oneOf:
            - type: string
            - type: array
              items:
                type: string
          enum:
            - Products
            - Alcohol
            - Entertainment
            - Health
            - Transport
            - Housing
            - Technique
            - Communal, communication
            - Sports, hobbies
            - Education
            - Other
            - Salary
            - Add. income
        required:
          - description
          - amount
          - date
          - category

    AddTransactionResponse:
      type: object
      properties:
        newBalance:
          type: number
        transaction:
          $ref: "#/components/schemas/Transaction"

    PeriodDataResponse:
      type: object
      properties:
        incomes:
          type: object
          properties:
            total:
              type: number
            incomesData:
              type: object
        expenses:
          type: object
          properties:
            total:
              type: number
            expensesData:
              type: object
      example:
        incomes:
          total: 5000
          incomesData:
            Salary:
              total: 5000
              Wypłata: 5000
        expenses:
          total: 122
          expensesData:
            Food:
              total: 122
              "Zakupy spożywcze": 122
